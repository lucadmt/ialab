* Progetto Prolog
*** 2021-09-28
**** Testing e Aggiunta di trasforma/3 e applicabile/2
Ho finito di aggiungere e testare trasforma/3 e applicabile/2.
*/Non sono complete, bisogna ancora tenere conto della posizione del 'buco'/*

Ho aggiunto una utility (~generate.py~) per generare un labirinto casuale.
*/Senza garanzia che sia risolvibile/*
A tal proposito, ho trovato un documento che sembra provare che il puzzle non è risolvibile quando il numero di swaps da fare per arrivare alla soluzione è dispari.

Ho aggiunto una utility (~show_plot.py~) per mostrare la configurazione generata del puzzle, partendo dal file ~configuration.pl~
*** 2021-10-15
**** Rendi le regole dipendenti dalla configurazione
Mi sono appena reso conto che procedere come prima sarebbe stato piuttosto complesso.
Ho introdotto più variabili, e reso la maggior parte delle regole dipendenti dalla configurazione.
*** 2021-10-16
**** show_plot.py
Adesso ~show_plot.py~, oltre che a non fare confusione con le rappresentazioni delle tiles, adesso legge una configurazione (una lista di tile(X, Y, Z)) da stdin.
Per il modo semplicistico e sbrigativo con cui l'ho fatto, si aspetta di vedere un ulteriore carattere prima del carattere di fine lista ']'.
**** DFS ha successo
Aggiunti dei test su alcune funzioni dubbiose, implementata correttamente una depth-first search, ha avuto successo su una configurazione banale.
Termina con backtracking, per cui si può cercare di chiedere un'altra soluzione.
Credo che A* potrebbe procedere meglio, sfruttando l'euristica della distanza di Manhattan magari, che è quella più semplice da implementare dato il problema.
*** 2021-10-17
**** Euristica di Manhattan
Ho aggiunto l'euristica di Manhattan, perché mi sembra quella più adeguata data il problema.
**** IDS, Profondità Limitata
Ho intenzione di usare IDA*, quindi ho implementato gli algoritmi sottostanti, anche per fare un confronto nell'ottica della relazione.
**** Difficoltà su IDA*, e migliorie
Devo ancora risolvere alcuni problemi nell'implementazione di IDA*, in particolare la fase in cui continua la ricerca con la f minore.
Tuttavia, ho pensato ad un altro dettaglio: attualmente choose/3 boicotta le ricerche. Perché tutto quello che fa, è restituire una delle configurazioni che portano la ricerca ad uno stato già visto.
Ma non fa altre ottimizzazioni. Potrei, invece 'pesare' ogni scelta con F, in modo tale da sapere quale azione promette meglio, e suggerirle quindi dalla più promettente alla meno promettente.
Inoltre, il "vincolo" di non rientrare in uno stato già visto, ad intuito direi che mi rallenta. Nel risolvere il puzzle non è importante che non si rientri in uno stato già visto, quello che importa invece, è "andare sempre verso la strada più promettente", che eventualmente risolve il puzzle.
*** 2021-11-19
**** Hchoose
Ho ancora delle difficoltà nell'implementazione di IDA*, comunque, ho implementato la scelta euristica delle azioni (minimizzando l'euristica sulla configurazione finale).
Per fare un benchmark, ho provato a eseguire Iterative Deepening con la ricerca euristica sul puzzle 'complesso' (partendo da profondità 1):
~% 46,074,809,145 inferences, 13591.879 CPU in 13604.815 seconds (100% CPU, 3389878 Lips)~
Al che ho interrotto l'esecuzione.
Ho riprovato a lasciare il computer acceso durante la notte, provando Iterative Deepening con la ricerca euristica sul puzzle 'complesso' (partendo da profondità 30):
~% 228,576,707,623 inferences, 67183.490 CPU in 67242.076 seconds (100% CPU, 3402275 Lips)~
Al che ho nuovamente interrotto l'esecuzione
*** 2021-12-15
**** Costo zero
Steps sono 0, non sta contando il costo attuale.
**** Il risultato...
% 138,929,439,448 inferences, 16386.692 CPU in 16409.940 seconds (100% CPU, 8478187 Lips)
Config = [tile(1,1,1),tile(2,1,2),tile(3,1,3),tile(4, 1,4),tile(1,2,5),tile(2,2,6),tile(3,2,7),tile(4,2,8),tile(1,3,9),tile(2,3,10),tile(3,3,11),tile(4,3,0),tile(1,4,14),tile(2,4,12),tile(3,4,15),tile(4,4,13)]
Solution = [action(tile(4, 4, 13), up), action(tile(3, 4, 15), right), action(tile(2, 4, 12), right), action(tile(3, 3, 11), down), action(tile(4, 3, 13), left), action(tile(4, 4, 15), up), action(tile(3, 4, 11), right), action(tile(2, 4, 12), right), action(tile(1, 4, 14), right), action(tile(1, 3, 9), down), action(tile(2, 3, 10), left), action(tile(3, 3, 13), left), action(tile(4, 3, 15), left), action(tile(4, 4, 11), up), action(tile(3, 4, 12), right), action(tile(3, 3, 15), down), action(tile(4, 3, 11), left), action(tile(4, 4, 12), up), action(tile(3, 4, 15), right), action(tile(2, 4, 14), right), action(tile(2, 3, 13), down), action(tile(3, 3, 11), left), action(tile(1, 3, 10), right), action(tile(1, 4, 9), up), action(tile(2, 4, 13), left), action(tile(3, 4, 14), left), action(tile(4, 4, 15), left)]
*** 2022-03-24
**** Test Facile
% 34,119 inferences, 0.012 CPU in 0.012 seconds (100% CPU, 2746875 Lips)
Config = [tile(1,1,1),tile(2,1,2),tile(3,1,3),tile(4,1,4),tile(1,2,5),tile(2,2,6),tile(3,2,7),tile(4,2,8),tile(1,3,10),tile(2,3,11),tile(3,3,12),tile(4,3,15),tile(1,4,0),tile(2,4,9),tile(3,4,13),tile(4,4,14)]
Solution = [action(tile(2,4,9),left),action(tile(3,4,13),left),action(tile(4,4,14),left),action(tile(4,3,15),down),action(tile(3,3,12),right),action(tile(2,3,11),right),action(tile(1,3,10),right),action(tile(1,4,9),up),action(tile(2,4,13),left),action(tile(3,4,14),left),action(tile(4,4,15),left)]
**** Test Medio (seconda metà fuori posto)
*** 2022-05-22
**** Test Facile
% 58,801 inferences, 0.007 CPU in 0.007 seconds (100% CPU, 8278115 Lips)
Config = [tile(1,1,1),tile(2,1,2),tile(3,1,3),tile(4,1,4),tile(1,2,5),tile(2,2,6),tile(3,2,7),tile(4,2,8),tile(1,3,10),tile(2,3,11),tile(3,3,12),tile(4,3,15),tile(1,4,0),tile(2,4,9),tile(3,4,13),tile(4,4,14)]
Solution = [action(tile(2,4,9),left),action(tile(3,4,13),left),action(tile(4,4,14),left),action(tile(4,3,15),down),action(tile(3,3,12),right),action(tile(2,3,11),right),action(tile(1,3,10),right),action(tile(1,4,9),up),action(tile(2,4,13),left),action(tile(3,4,14),left),action(tile(4,4,15),left)]
**** Test Facile, senza ricerca euristica
% 41,895 inferences, 0.005 CPU in 0.005 seconds (100% CPU, 8236387 Lips)
Config = [tile(1,1,1),tile(2,1,2),tile(3,1,3),tile(4,1,4),tile(1,2,5),tile(2,2,6),tile(3,2,7),tile(4,2,8),tile(1,3,10),tile(2,3,11),tile(3,3,12),tile(4,3,15),tile(1,4,0),tile(2,4,9),tile(3,4,13),tile(4,4,14)]
Solution = [action(tile(2,4,9),left),action(tile(3,4,13),left),action(tile(4,4,14),left),action(tile(4,3,15),down),action(tile(3,3,12),right),action(tile(2,3,11),right),action(tile(1,3,10),right),action(tile(1,4,9),up),action(tile(2,4,13),left),action(tile(3,4,14),left),action(tile(4,4,15),left)]
**** Test Medio (seconda metà fuori posto)
% 328,418,813,052 inferences, 36671.909 CPU in 36669.757 seconds (100% CPU, 8955596 Lips)
Config = [tile(1,1,1),tile(2,1,2),tile(3,1,3),tile(4,1,4),tile(1,2,5),tile(2,2,6),tile(3,2,7),tile(4,2,8),tile(1,3,15),tile(2,3,0),tile(3,3,14),tile(4,3,11),tile(1,4,10),tile(2,4,12),tile(3,4,9),tile(4,4,13)]
Solution = [action(tile(2,4,12),up),action(tile(3,4,9),left),action(tile(4,4,13),left),action(tile(4,3,11),down),action(tile(3,3,14),right),action(tile(2,3,12),right),action(tile(1,3,15),right),action(tile(1,4,10),up),action(tile(2,4,9),left),action(tile(3,4,13),left),action(tile(3,3,12),down),action(tile(4,3,14),left),action(tile(4,4,11),up),action(tile(3,4,12),right),action(tile(3,3,14),down),action(tile(2,3,15),right),action(tile(1,3,10),right),action(tile(1,4,9),up),action(tile(2,4,13),left),action(tile(3,4,14),left),action(tile(3,3,15),down),action(tile(4,3,11),left),action(tile(4,4,12),up)]
**** Test Medio, senza ricerca euristica
Interrotto dopo 28 ore di calcolo
**** Test Difficile (random puzzle)

Config = [tile(1,1,11),tile(2,1,7),tile(3,1,1),tile(4, 1,5),tile(1,2,3),tile(2,2,9),tile(3,2,4),tile(4,2,8),tile(1,3,2),tile(2,3,13),tile(3,3,12),tile(4,3,15),tile(1,4,6),tile(2,4,14),tile(3,4,10),tile(4,4,0)]
Solution = []
